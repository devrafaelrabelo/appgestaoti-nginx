server {
    listen 80;
    server_name appgestaoti.local;

    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Frontend Next.js
    location / {
        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Backend Spring Boot (API Java)
    location /api/ {
        add_header Access-Control-Allow-Origin "http://appgestaoti.local" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Auth-Status" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        proxy_pass http://backend:8080/api/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # FastAPI UserHub (manageraccount)
    location /userhub/ {
        proxy_pass http://manageraccount:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # FastAPI Selenium automation
    location /selenium/ {
        proxy_pass http://automation-selenium:5000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Selenium Grid
    location /selenium-hub/ {
        proxy_pass http://selenium-hub:4444;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # # WPPConnect (WhatsApp)
    # location /wpp-api/ {
    #     add_header X-Frame-Options "SAMEORIGIN";
    #     add_header X-XSS-Protection "1; mode=block";
    #     add_header X-Content-Type-Options "nosniff";

    #     add_header Access-Control-Allow-Origin * always;
    #     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    #     add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;

    #     if ($request_method = OPTIONS) {
    #         return 204;
    #     }

    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;

    #     proxy_pass http://wppconnect-server:21465/;
    # }

    # Monitor de saúde (health-monitor)
    location /monitor/ {
        proxy_pass http://health-monitor:8000/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }
    }

    # Health check simples do nginx
    location = /health {
        return 200 'NGINX OK';
        add_header Content-Type text/plain;
    }

    # Status do NGINX (acesso restrito à rede Docker bridge)
    location = /nginx_status {
        stub_status;
        allow 127.0.0.1;
        allow 172.17.0.0/16;
        allow 172.18.0.0/16;
        deny all;
        access_log off;
        add_header Content-Type text/plain;
    }
}
